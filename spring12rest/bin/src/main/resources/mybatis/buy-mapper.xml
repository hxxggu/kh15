<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<mapper namespace="buy">

	<!-- 등록 -->
	<select id="buySequence" resultType="long">
		select buy_seq.nextval from dual
	</select>
	<insert id="addBuy" >
		insert into buy(buy_no, buy_owner, buy_tid, buy_name, buy_total, buy_remain)
		values(#{buyNo}, #{buyOwner}, #{buyTid}, #{buyName}, #{buyTotal}, #{buyTotal})
		<!-- buy_remain도 buy_total과 동일하게 처리 -->
	</insert>
	
	<select id="buyDetailSequence" resultType="long">
		select buy_detail_seq.nextval from dual
	</select>
	<insert id="addBuyDetail">
		insert into buy_detail(
			buy_detail_no, buy_detail_origin, buy_detail_item,
			buy_detail_name, buy_detail_price, buy_detail_qty,
			buy_detail_status
		)
		values(
			#{buyDetailNo}, #{buyDetailOrigin}, #{buyDetailItem},
			#{buyDetailName}, #{buyDetailPrice}, #{buyDetailQty},
			'Y'
		)
	</insert>
	
	<!-- 조회 -->
	<select id="listBuy" resultType="BuyDto">
		select * from buy order by buy_no desc
	</select>
	
	<select id="listBuyDetail" resultType="BuyDetailDto">
		select * from buy_detail
		where buy_detail_origin = #{buyDetailOrigin}
		order by buy_detail_no asc
	</select>
	
	<!--
		mybatis에서 계층형 조회를 처리할 수 있도록 구현
		 - mybatis에서 자동으로 처리해 주는 건 1 depth 까지이다
		 - 그보다 복잡하거나 구조를 변경해줘야 하는 경우에는 수동으로 조회해야 함
		 - 수동으로 조회하기 위해서는 조회할 구조를 <resultMap>으로 생성
		 
		 - type = 실제 자료형
		 - id = 매퍼에서 부르기 위한 별칭
		 - association은 인스턴스를 의미
		 - collection은 컬렉션(리스트, 맵, 셋 등)을 의미
		 - property = 필드명
		 - <result>를 이용하여 DB컬럼과
		 - column = DB 컬럼명 (snake case)
		 - property = 클래스 필드명 (camel case)
		 	( * 표기법이 각각 다르므로 잘 구분해야 함 )
		 - select = 데이터를 채우기 위해서 필요한 구문
	 -->
	 <resultMap type="BuyTotalVO" id="buyTotalVO">
	 	<!-- 한 개의 클래스와 한 개의 리스트가 있음을 알려줘야 함 -->
		<association property="buyDto" javaType="BuyDto">
			<result column="buy_no" property="buyNo"/>
			<result column="buy_owner" property="buyOwner"/>
			<result column="buy_tid" property="buyTid"/>
			<result column="buy_name" property="buyName"/>
			<result column="buy_total" property="buyTotal"/>
			<result column="buy_remain" property="buyRemain"/>
			<result column="buy_time" property="buyTime"/>
		</association>
	 			<collection property="buyList" javaType="List" ofType="BuyDetailDto" select="listBuyDetail" column="buy_no">
	 	<!-- 
	 		- ofType: 안에 어떤 데이터가 있는지 설명 / 
	 		- properties에 이미 설정을 해놨기 때문에 javaType과 ofType에 import 하듯이 "java.util.List" 로 쓰지 않아도 됨
	 		- listBuyDetail에서 buy_no을 통해 데이터를 알아서 찾아서 불러와라
	 	 -->
	 		<result column="buy_detail_no" property="buyDetailNo"/>
			<result column="buy_detail_origin" property="buyDetailOrigin"/>
			<result column="buy_detail_item" property="buyDetailItem"/>
			<result column="buy_detail_name" property="buyDetailName"/>
			<result column="buy_detail_price" property="buyDetailPrice"/>
			<result column="buy_detail_qty" property="buyDetailQty"/>
			<result column="buy_detail_status" property="buyDetailStatus"/>
	 	</collection>
	 </resultMap>
	 
	 <!-- resultMap을 이용한 조회 -->
	 <select id="listBuyAuto" resultMap="buyTotalVO">
	 	select * from buy
	 	<if test="buyOwner != null">
	 		where buy_owner = #{buyOwner}
	 	</if>
	 	order by buy_no desc
	 </select>
	 
	 <select id="findbuy" resultType="BuyDto">
	 	select * from buy where buy_no = #{buyNo}
	 </select>
	 
	<!-- 취소(전체/부분) -->
	<update id="cancelAll">
		update buy_detail 
		set buy_detail_status = 'N' 
		where buy_detail_origin = #{buyDetailOrigin}
	</update>
	 
	 <update id="cancelPart">
	 	update buy_detail
	 	set buy_detail_status = 'N'
	 	where buy_detail_no = #{buyDetailNo}
	 </update>
	 
	 <!-- 결제 상세 정보 단일 조회 -->
	 <select id="findDetail" resultType="BuyDetailDto">
	 	select * from buy_detail where buy_detail_no = #{buyDetailNo}
	 </select>
	 
	<!-- 결제잔여금액 수정 -->
	<update id="updateBuy">
		update buy 
		set buy_remain = #{buyRemain} 
		where buy_no = #{buyNo}
	</update>
	 
</mapper>